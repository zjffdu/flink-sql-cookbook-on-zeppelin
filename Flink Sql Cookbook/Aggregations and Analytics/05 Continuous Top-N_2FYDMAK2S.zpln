{
  "paragraphs": [
    {
      "text": "%md\n\n\u003cbr/\u003e\n\n![Twitter Badge](https://img.shields.io/badge/Flink%20Version-1.9%2B-lightgrey)\n\n\u003e :bulb: This example will show how to continuously calculate the \"Top-N\" rows based on a given attribute, using an `OVER` window and the `ROW_NUMBER()` function.\n\nThe source table (`spells_cast`) is backed by the [`faker` connector](https://flink-packages.org/packages/flink-faker), which continuously generates rows in memory based on Java Faker expressions.\n\nThe Ministry of Magic tracks every spell a wizard casts throughout Great Britain and wants to know every wizard\u0027s Top 2 all-time favorite spells. \n\nFlink SQL can be used to calculate continuous [aggregations](../../foundations/05_group_by/05_group_by.md), so if we know\neach spell a wizard has cast, we can maintain a continuous total of how many times they have cast that spell. \n\n```sql\nSELECT wizard, spell, COUNT(*) AS times_cast\nFROM spells_cast\nGROUP BY wizard;\n```\n\nThis result can be used in an `OVER` window to calculate a [Top-N](https://docs.ververica.com/user_guide/sql_development/queries.html#top-n).\nThe rows are partitioned using the `wizard` column, and are then ordered based on the count of spell casts (`times_cast DESC`). \nThe built-in function `ROW_NUMBER()` assigns a unique, sequential number to each row, starting from one, according to the rows\u0027 ordering within the partition.\nFinally, the results are filtered for only those rows with a `row_num \u003c\u003d 2` to find each wizard\u0027s top 2 favorite spells. \n\nWhere Flink is most potent in this query is its ability to issue retractions.\nAs wizards cast more spells, their top 2 will change. \nWhen this occurs, Flink will issue a retraction, modifying its output, so the result is always correct and up to date. ",
      "user": "anonymous",
      "dateUpdated": "2021-10-08 16:25:38.594",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cbr/\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://img.shields.io/badge/Flink%20Version-1.9%2B-lightgrey\" alt\u003d\"Twitter Badge\" /\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e💡 This example will show how to continuously calculate the \u0026ldquo;Top-N\u0026rdquo; rows based on a given attribute, using an \u003ccode\u003eOVER\u003c/code\u003e window and the \u003ccode\u003eROW_NUMBER()\u003c/code\u003e function.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe source table (\u003ccode\u003espells_cast\u003c/code\u003e) is backed by the \u003ca href\u003d\"https://flink-packages.org/packages/flink-faker\"\u003e\u003ccode\u003efaker\u003c/code\u003e connector\u003c/a\u003e, which continuously generates rows in memory based on Java Faker expressions.\u003c/p\u003e\n\u003cp\u003eThe Ministry of Magic tracks every spell a wizard casts throughout Great Britain and wants to know every wizard\u0026rsquo;s Top 2 all-time favorite spells.\u003c/p\u003e\n\u003cp\u003eFlink SQL can be used to calculate continuous \u003ca href\u003d\"../../foundations/05_group_by/05_group_by.md\"\u003eaggregations\u003c/a\u003e, so if we know\u003cbr /\u003e\neach spell a wizard has cast, we can maintain a continuous total of how many times they have cast that spell.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-sql\"\u003eSELECT wizard, spell, COUNT(*) AS times_cast\nFROM spells_cast\nGROUP BY wizard;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis result can be used in an \u003ccode\u003eOVER\u003c/code\u003e window to calculate a \u003ca href\u003d\"https://docs.ververica.com/user_guide/sql_development/queries.html#top-n\"\u003eTop-N\u003c/a\u003e.\u003cbr /\u003e\nThe rows are partitioned using the \u003ccode\u003ewizard\u003c/code\u003e column, and are then ordered based on the count of spell casts (\u003ccode\u003etimes_cast DESC\u003c/code\u003e).\u003cbr /\u003e\nThe built-in function \u003ccode\u003eROW_NUMBER()\u003c/code\u003e assigns a unique, sequential number to each row, starting from one, according to the rows\u0026rsquo; ordering within the partition.\u003cbr /\u003e\nFinally, the results are filtered for only those rows with a \u003ccode\u003erow_num \u0026lt;\u003d 2\u003c/code\u003e to find each wizard\u0026rsquo;s top 2 favorite spells.\u003c/p\u003e\n\u003cp\u003eWhere Flink is most potent in this query is its ability to issue retractions.\u003cbr /\u003e\nAs wizards cast more spells, their top 2 will change.\u003cbr /\u003e\nWhen this occurs, Flink will issue a retraction, modifying its output, so the result is always correct and up to date.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614313517301_112591276",
      "id": "paragraph_1614313517301_112591276",
      "dateCreated": "2021-02-26 12:25:17.301",
      "dateStarted": "2021-10-08 16:25:38.594",
      "dateFinished": "2021-10-08 16:25:38.606",
      "status": "FINISHED"
    },
    {
      "text": "%md\n这个例子将展示如何使用 `OVER` 窗口和 `ROW_NUMBER()` 函数来基于给定的属性持续计算 \"Top-N\" 条记录。\n\n例子中使用的 source 表`spells_cast` 的数据是利用  [`faker` connector](https://github.com/knaufk/flink-faker) 产生的，它基于 Java Faker 表达式不断的在内存中生成数据。\n\n魔法部在追踪每个巫师在英国施法的每一个咒语，并想知道每个巫师最喜欢的两个咒语。\n\nFlink SQL 可以被用来持续聚合计算，所以如果我们知道每个巫师施法的咒语，我门就可以持续维护他们每个施法的咒语的总数。\n\n```sql\nSELECT wizard, spell, COUNT(*) AS times_cast\nFROM spells_cast\nGROUP BY wizard, spell;\n```\n\n结果可以被用在 `OVER` 窗口中，来计算[Top-N](https://docs.ververica.com/user_guide/sql_development/queries.html#top-n)。 数据被 `wizard` 字段分区，然后基于咒语施法的次数排序 (`times_cast DESC`)，内置函数 `ROW_NUMBER()` 对每个分区内的数据，从第一行开始配置一个顺序的唯一的行号。最后这些结果使用 `row_num \u003c\u003d 2` 来过滤出每个巫师最喜欢的2条咒语。\n\nFLink 在这个查询中最厉害 的地方在于可以发出retraction。随着巫师不断的施法咒语，他们的 top 2 将会改变。一旦发生改变，Flink将发送 retraction，然后修改它的输出，所以结果总是正确的且最新的。\n",
      "user": "anonymous",
      "dateUpdated": "2021-03-18 15:54:45.403",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e这个例子将展示如何使用 \u003ccode\u003eOVER\u003c/code\u003e 窗口和 \u003ccode\u003eROW_NUMBER()\u003c/code\u003e 函数来基于给定的属性持续计算 \u0026ldquo;Top-N\u0026rdquo; 条记录。\u003c/p\u003e\n\u003cp\u003e例子中使用的 source 表\u003ccode\u003espells_cast\u003c/code\u003e 的数据是利用  \u003ca href\u003d\"https://github.com/knaufk/flink-faker\"\u003e\u003ccode\u003efaker\u003c/code\u003e connector\u003c/a\u003e 产生的，它基于 Java Faker 表达式不断的在内存中生成数据。\u003c/p\u003e\n\u003cp\u003e魔法部在追踪每个巫师在英国施法的每一个咒语，并想知道每个巫师最喜欢的两个咒语。\u003c/p\u003e\n\u003cp\u003eFlink SQL 可以被用来持续聚合计算，所以如果我们知道每个巫师施法的咒语，我门就可以持续维护他们每个施法的咒语的总数。\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-sql\"\u003eSELECT wizard, spell, COUNT(*) AS times_cast\nFROM spells_cast\nGROUP BY wizard, spell;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e结果可以被用在 \u003ccode\u003eOVER\u003c/code\u003e 窗口中，来计算\u003ca href\u003d\"https://docs.ververica.com/user_guide/sql_development/queries.html#top-n\"\u003eTop-N\u003c/a\u003e。 数据被 \u003ccode\u003ewizard\u003c/code\u003e 字段分区，然后基于咒语施法的次数排序 (\u003ccode\u003etimes_cast DESC\u003c/code\u003e)，内置函数 \u003ccode\u003eROW_NUMBER()\u003c/code\u003e 对每个分区内的数据，从第一行开始配置一个顺序的唯一的行号。最后这些结果使用 \u003ccode\u003erow_num \u0026lt;\u003d 2\u003c/code\u003e 来过滤出每个巫师最喜欢的2条咒语。\u003c/p\u003e\n\u003cp\u003eFLink 在这个查询中最厉害 的地方在于可以发出retraction。随着巫师不断的施法咒语，他们的 top 2 将会改变。一旦发生改变，Flink将发送 retraction，然后修改它的输出，所以结果总是正确的且最新的。\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1615115064951_644342547",
      "id": "paragraph_1615115064951_644342547",
      "dateCreated": "2021-03-07 11:04:24.954",
      "dateStarted": "2021-03-18 15:54:45.408",
      "dateFinished": "2021-03-18 15:54:45.427",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ssql\n\n\nDROP TABLE IF EXISTS spells_cast;\n\nCREATE TABLE spells_cast (\n    wizard STRING,\n    spell  STRING\n) WITH (\n  \u0027connector\u0027 \u003d \u0027faker\u0027,\n  \u0027fields.wizard.expression\u0027 \u003d \u0027#{harry_potter.characters}\u0027,\n  \u0027fields.spell.expression\u0027 \u003d \u0027#{harry_potter.spells}\u0027\n);\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-08 16:25:45.891",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Table has been dropped.\nTable has been created.\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614304166235_1795181293",
      "id": "paragraph_1614304166235_1795181293",
      "dateCreated": "2021-02-26 09:49:26.236",
      "dateStarted": "2021-10-08 16:25:45.895",
      "dateFinished": "2021-10-08 16:26:16.168",
      "status": "FINISHED"
    },
    {
      "text": "%flink.ssql(type\u003dupdate)\n\nSELECT wizard, spell, times_cast\nFROM (\n    SELECT *,\n    ROW_NUMBER() OVER (PARTITION BY wizard ORDER BY times_cast DESC) AS row_num\n    FROM (SELECT wizard, spell, COUNT(*) AS times_cast FROM spells_cast GROUP BY wizard, spell)\n)\nWHERE row_num \u003c\u003d 2;  \n\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-08 16:26:21.733",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "wizard": "string",
                      "spell": "string",
                      "times_cast": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TABLE",
            "data": "wizard\tspell\ttimes_cast\nAberforth Dumbledore\tObliviate\t53\nAberforth Dumbledore\tWingardium Leviosa\t50\nAlastor (Mad-Eye) Moody\tLumos\t50\nAlastor (Mad-Eye) Moody\tAlohomora\t52\nAlbert Runcorn\tExpelliarmus\t55\nAlbert Runcorn\tAlohomora\t54\nAlbus Dumbledore\tWingardium Leviosa\t58\nAlbus Dumbledore\tExpecto Patronum\t53\nAlecto Carrow\tCrucio\t60\nAlecto Carrow\tExpelliarmus\t61\nAlice Longbottom\tAlohomora\t54\nAlice Longbottom\tWingardium Leviosa\t55\nAlicia Spinnet\tAccio\t43\nAlicia Spinnet\tRevelio\t48\nAmelia Bones\tReparo\t49\nAmelia Bones\tRiddikulus\t52\nAmos Diggory\tSectumsempra\t66\nAmos Diggory\tObliviate\t50\nAmycus Carrow\tReparo\t52\nAmycus Carrow\tExpecto Patronum\t58\nAndromeda Tonks\tRiddikulus\t52\nAndromeda Tonks\tSectumsempra\t50\nAngelina Johnson\tRevelio\t53\nAngelina Johnson\tLumos\t56\nAnthony Goldstein\tAlohomora\t50\nAnthony Goldstein\tAvada Kedavra\t50\nAntioch Peverell\tRiddikulus\t52\nAntioch Peverell\tAlohomora\t54\nAntonin Dolohov\tWingardium Leviosa\t53\nAntonin Dolohov\tAccio\t61\nArabella Figg\tExpecto Patronum\t52\nArabella Figg\tSectumsempra\t52\nAragog\tConfundo\t46\nAragog\tAlohomora\t48\nArgus Filch\tStupefy\t51\nArgus Filch\tRevelio\t52\nAriana Dumbledore\tAccio\t51\nAriana Dumbledore\tCrucio\t61\nArmando Dippet\tAvada Kedavra\t63\nArmando Dippet\tRiddikulus\t55\nArthur Weasley\tWingardium Leviosa\t57\nArthur Weasley\tAlohomora\t56\nAstoria Greengrass\tCrucio\t49\nAstoria Greengrass\tStupefy\t51\nAugusta Longbottom\tAlohomora\t46\nAugusta Longbottom\tSectumsempra\t48\nAugustus Rookwood\tAlohomora\t50\nAugustus Rookwood\tExpelliarmus\t53\nAurora Sinistra\tSectumsempra\t53\nAurora Sinistra\tLumos\t56\nBane\tRevelio\t54\nBane\tLumos\t51\nBartemius Crouch, Sr.\tStupefy\t55\nBartemius Crouch, Sr.\tAlohomora\t52\nBarty Crouch, Jr.\tLumos\t53\nBarty Crouch, Jr.\tAvada Kedavra\t50\nBathilda Bagshot\tAccio\t58\nBathilda Bagshot\tRiddikulus\t52\nBathsheda Babbling\tStupefy\t49\nBathsheda Babbling\tRevelio\t50\nBeedle the Bard\tConfundo\t54\nBeedle the Bard\tReparo\t54\nBellatrix Lestrange\tConfundo\t48\nBellatrix Lestrange\tSectumsempra\t49\nBertha Jorkins\tLumos\t54\nBertha Jorkins\tRiddikulus\t54\nBill Weasley\tCrucio\t51\nBill Weasley\tLumos\t56\nBlaise Zabini\tLumos\t56\nBlaise Zabini\tExpecto Patronum\t51\nBob Ogden\tReparo\t51\nBob Ogden\tRiddikulus\t55\nBogrod\tExpecto Patronum\t52\nBogrod\tReparo\t56\nBroderick Bode\tWingardium Leviosa\t46\nBroderick Bode\tLumos\t47\nBuckbeak\tExpecto Patronum\t62\nBuckbeak\tRevelio\t55\nCadmus Peverell\tAvada Kedavra\t52\nCadmus Peverell\tAlohomora\t48\nCassius Warrington\tAvada Kedavra\t57\nCassius Warrington\tCrucio\t54\nCedric Diggory\tLumos\t62\nCedric Diggory\tWingardium Leviosa\t50\nCharity Burbage\tSectumsempra\t56\nCharity Burbage\tLumos\t55\nCharlie Weasley\tAccio\t52\nCharlie Weasley\tConfundo\t49\nCho Chang\tReparo\t55\nCho Chang\tLumos\t54\nCormac McLaggen\tAlohomora\t54\nCormac McLaggen\tAccio\t52\nCornelius Fudge\tRiddikulus\t54\nCornelius Fudge\tWingardium Leviosa\t53\nCrookshanks\tCrucio\t50\nCrookshanks\tExpecto Patronum\t57\nCuthbert Binns\tLumos\t56\nCuthbert Binns\tExpelliarmus\t58\nDean Thomas\tAvada Kedavra\t51\nDean Thomas\tSectumsempra\t49\nDedalus Diggle\tAvada Kedavra\t51\nDedalus Diggle\tExpelliarmus\t58\nDemelza Robins\tAvada Kedavra\t54\nDemelza Robins\tObliviate\t50\nDennis Creevey\tConfundo\t63\nDennis Creevey\tRiddikulus\t54\nDirk Cresswell\tExpelliarmus\t55\nDirk Cresswell\tAvada Kedavra\t53\nDobby\tStupefy\t57\nDobby\tConfundo\t53\nDolores Jane Umbridge\tAlohomora\t59\nDolores Jane Umbridge\tSectumsempra\t57\nDraco Malfoy\tRevelio\t51\nDraco Malfoy\tReparo\t53\nDudley Dursley\tAccio\t55\nDudley Dursley\tRevelio\t58\nElphias Doge\tConfundo\t56\nElphias Doge\tCrucio\t61\nEmmeline Vance\tRevelio\t47\nEmmeline Vance\tCrucio\t52\nEnid\tObliviate\t61\nEnid\tCrucio\t55\nErnie Macmillan\tAccio\t50\nErnie Macmillan\tRiddikulus\t50\nErrol\tAlohomora\t55\nErrol\tWingardium Leviosa\t54\nEverard\tConfundo\t56\nEverard\tExpelliarmus\t53\nFabian Prewett\tConfundo\t49\nFabian Prewett\tWingardium Leviosa\t54\nFang\tExpecto Patronum\t49\nFang\tStupefy\t52\nFawkes\tRiddikulus\t58\nFawkes\tObliviate\t56\nFenrir Greyback\tObliviate\t53\nFenrir Greyback\tRiddikulus\t54\nFilius Flitwick\tAvada Kedavra\t59\nFilius Flitwick\tStupefy\t53\nFirenze\tAvada Kedavra\t60\nFirenze\tReparo\t55\nFleur Delacour\tSectumsempra\t54\nFleur Delacour\tStupefy\t53\nFlorean Fortescue\tWingardium Leviosa\t58\nFlorean Fortescue\tAlohomora\t55\nFluffy\tAccio\t51\nFluffy\tReparo\t50\nFrank Bryce\tExpelliarmus\t57\nFrank Bryce\tAlohomora\t61\nFrank Longbottom\tAvada Kedavra\t53\nFrank Longbottom\tStupefy\t51\nFred Weasley\tRevelio\t56\nFred Weasley\tReparo\t54\nFridwulfa\tAccio\t50\nFridwulfa\tExpelliarmus\t49\nGabrielle Delacour\tLumos\t50\nGabrielle Delacour\tAvada Kedavra\t49\nGarrick Ollivander\tExpelliarmus\t60\nGarrick Ollivander\tExpecto Patronum\t51\nGellert Grindelwald\tAccio\t54\nGellert Grindelwald\tRiddikulus\t49\nGeorge Weasley\tLumos\t57\nGeorge Weasley\tConfundo\t50\nGideon Prewett\tAccio\t53\nGideon Prewett\tWingardium Leviosa\t65\nGilderoy Lockhart\tRiddikulus\t55\nGilderoy Lockhart\tWingardium Leviosa\t49\nGinny Weasley\tStupefy\t62\nGinny Weasley\tConfundo\t49\nGodric Gryffindor\tCrucio\t58\nGodric Gryffindor\tAvada Kedavra\t51\nGoyle Sr.\tSectumsempra\t56\nGoyle Sr.\tLumos\t57\nGraham Montague\tLumos\t47\nGraham Montague\tStupefy\t53\nGrawp\tObliviate\t54\nGrawp\tCrucio\t53\nGreat Aunt Muriel\tAlohomora\t50\nGreat Aunt Muriel\tExpelliarmus\t54\nGregorovitch\tCrucio\t50\nGregorovitch\tRevelio\t52\nGregory Goyle\tReparo\t53\nGregory Goyle\tStupefy\t52\nGriphook\tRevelio\t61\nGriphook\tAlohomora\t53\nGriselda Marchbanks\tStupefy\t53\nGriselda Marchbanks\tExpelliarmus\t49\nHannah Abbott\tLumos\t57\nHannah Abbott\tWingardium Leviosa\t50\nHarry Potter\tAlohomora\t52\nHarry Potter\tSectumsempra\t54\nHedwig\tCrucio\t57\nHedwig\tWingardium Leviosa\t52\nHelena Ravenclaw (The Grey Lady)\tReparo\t58\nHelena Ravenclaw (The Grey Lady)\tObliviate\t55\nHelga Hufflepuff\tSectumsempra\t53\nHelga Hufflepuff\tReparo\t54\nHepzibah Smith\tStupefy\t43\nHepzibah Smith\tRiddikulus\t44\nHeromine Granger\tSectumsempra\t51\nHeromine Granger\tStupefy\t51\nHokey\tExpelliarmus\t56\nHokey\tRiddikulus\t55\nHorace Slughorn\tAlohomora\t54\nHorace Slughorn\tReparo\t63\nIgnotus Peverell\tWingardium Leviosa\t55\nIgnotus Peverell\tReparo\t51\nIgor Karkaroff\tObliviate\t53\nIgor Karkaroff\tRiddikulus\t56\nIrma Prince\tLumos\t59\nIrma Prince\tAccio\t52\nJames Potter\tAvada Kedavra\t53\nJames Potter\tCrucio\t53\nJohn Dawlish\tAvada Kedavra\t50\nJohn Dawlish\tCrucio\t59\nJustin Finch-Fletchley\tWingardium Leviosa\t52\nJustin Finch-Fletchley\tSectumsempra\t57\nKatie Bell\tAvada Kedavra\t49\nKatie Bell\tRevelio\t57\nKennilworthy Whisp\tAccio\t51\nKennilworthy Whisp\tRevelio\t57\nKingsley Shacklebolt\tAlohomora\t62\nKingsley Shacklebolt\tConfundo\t60\nKreacher\tCrucio\t60\nKreacher\tReparo\t56\nLavender Brown\tExpelliarmus\t50\nLavender Brown\tExpecto Patronum\t50\nLee Jordan\tRiddikulus\t56\nLee Jordan\tConfundo\t57\nLily Potter\tCrucio\t55\nLily Potter\tObliviate\t60\nLord Voldemort\tCrucio\t49\nLord Voldemort\tConfundo\t56\nLucius Malfoy\tStupefy\t54\nLucius Malfoy\tAccio\t56\nLudo Bagman\tObliviate\t56\nLudo Bagman\tAvada Kedavra\t53\nLuna Lovegood\tConfundo\t51\nLuna Lovegood\tExpecto Patronum\t52\nMadam Malkin\tRevelio\t58\nMadam Malkin\tWingardium Leviosa\t55\nMadam Rosmerta\tSectumsempra\t52\nMadam Rosmerta\tAlohomora\t51\nMafalda Hopkirk\tSectumsempra\t50\nMafalda Hopkirk\tRiddikulus\t51\nMagorian\tStupefy\t56\nMagorian\tAccio\t54\nMarcus Belby\tExpelliarmus\t50\nMarcus Belby\tObliviate\t53\nMarcus Flint\tStupefy\t52\nMarcus Flint\tAccio\t56\nMarge Dursley\tWingardium Leviosa\t59\nMarge Dursley\tReparo\t54\nMarietta Edgecombe\tExpelliarmus\t56\nMarietta Edgecombe\tWingardium Leviosa\t55\nMarvolo Gaunt\tSectumsempra\t55\nMarvolo Gaunt\tExpelliarmus\t61\nMary Cattermole\tConfundo\t51\nMary Cattermole\tReparo\t53\nMerope Gaunt\tWingardium Leviosa\t53\nMerope Gaunt\tRiddikulus\t54\nMichael Corner\tAlohomora\t56\nMichael Corner\tExpecto Patronum\t52\nMillicent Bulstrode\tCrucio\t58\nMillicent Bulstrode\tStupefy\t55\nMinerva McGonagall\tRiddikulus\t54\nMinerva McGonagall\tStupefy\t55\nMoaning Myrtle\tAlohomora\t53\nMoaning Myrtle\tExpecto Patronum\t54\nMolly Weasley\tConfundo\t52\nMolly Weasley\tLumos\t51\nMoran\tRiddikulus\t53\nMoran\tExpecto Patronum\t52\nMorfin Gaunt\tAlohomora\t55\nMorfin Gaunt\tReparo\t55\nMr. Borgin\tRiddikulus\t59\nMr. Borgin\tRevelio\t52\nMr. Roberts\tConfundo\t53\nMr. Roberts\tAvada Kedavra\t50\nMrs. Cole\tAccio\t48\nMrs. Cole\tSectumsempra\t52\nMrs. Norris\tAccio\t62\nMrs. Norris\tSectumsempra\t53\nMundungus Fletcher\tWingardium Leviosa\t49\nMundungus Fletcher\tConfundo\t50\nMyrtle Warren\tStupefy\t49\nMyrtle Warren\tExpecto Patronum\t59\nNagini\tCrucio\t65\nNagini\tExpecto Patronum\t57\nNarcissa Malfoy\tWingardium Leviosa\t52\nNarcissa Malfoy\tObliviate\t59\nNearly Headless Nick\tAlohomora\t52\nNearly Headless Nick\tWingardium Leviosa\t52\nNeville Longbottom\tSectumsempra\t52\nNeville Longbottom\tWingardium Leviosa\t52\nNewt Scamander\tRevelio\t54\nNewt Scamander\tAccio\t63\nNicholas Flamel\tReparo\t55\nNicholas Flamel\tObliviate\t52\nNorbert\tLumos\t51\nNorbert\tObliviate\t51\nNymphadora Tonks\tExpecto Patronum\t50\nNymphadora Tonks\tLumos\t55\nOliver Wood\tAccio\t51\nOliver Wood\tReparo\t60\nOlympe Maxime\tAccio\t49\nOlympe Maxime\tAvada Kedavra\t49\nPadma Patil\tWingardium Leviosa\t51\nPadma Patil\tAccio\t52\nPansy Parkinson\tConfundo\t51\nPansy Parkinson\tRiddikulus\t44\nParvati Patil\tAlohomora\t50\nParvati Patil\tExpecto Patronum\t55\nPeeves\tRevelio\t50\nPeeves\tAccio\t54\nPenelope Clearwater\tConfundo\t53\nPenelope Clearwater\tSectumsempra\t53\nPercy Weasley\tAvada Kedavra\t50\nPercy Weasley\tRevelio\t54\nPeter Pettigrew\tExpelliarmus\t52\nPeter Pettigrew\tReparo\t52\nPetunia Dursley\tAvada Kedavra\t54\nPetunia Dursley\tCrucio\t52\nPhineas Nigellus Black\tRevelio\t52\nPhineas Nigellus Black\tExpecto Patronum\t59\nPigwidgeon\tCrucio\t51\nPigwidgeon\tAvada Kedavra\t59\nPius Thicknesse\tAccio\t58\nPius Thicknesse\tCrucio\t54\nPomona Sprout\tObliviate\t47\nPomona Sprout\tAccio\t49\nPoppy Pomfrey\tAlohomora\t52\nPoppy Pomfrey\tExpelliarmus\t52\nQuirinus Quirrell\tReparo\t50\nQuirinus Quirrell\tExpelliarmus\t55\nRabastan Lestrange\tReparo\t58\nRabastan Lestrange\tObliviate\t57\nReginald Cattermole\tStupefy\t64\nReginald Cattermole\tExpecto Patronum\t61\nRegulus Arcturus Black\tRevelio\t55\nRegulus Arcturus Black\tExpecto Patronum\t52\nRemus Lupin\tWingardium Leviosa\t54\nRemus Lupin\tCrucio\t53\nRita Skeeter\tReparo\t47\nRita Skeeter\tExpecto Patronum\t52\nRodolphus Lestrange\tStupefy\t46\nRodolphus Lestrange\tObliviate\t46\nRoger Davies\tObliviate\t55\nRoger Davies\tAccio\t63\nRolanda Hooch\tAvada Kedavra\t57\nRolanda Hooch\tAccio\t59\nRolf Scamander\tAccio\t57\nRolf Scamander\tWingardium Leviosa\t50\nRomilda Vane\tConfundo\t62\nRomilda Vane\tAvada Kedavra\t60\nRon Weasley\tAlohomora\t50\nRon Weasley\tExpecto Patronum\t53\nRonan\tAlohomora\t52\nRonan\tAvada Kedavra\t51\nRowena Ravenclaw\tAlohomora\t52\nRowena Ravenclaw\tAccio\t57\nRubeus Hagrid\tAvada Kedavra\t50\nRubeus Hagrid\tLumos\t52\nRufus Scrimgeour\tSectumsempra\t56\nRufus Scrimgeour\tExpelliarmus\t59\nSalazar Slytherin\tLumos\t49\nSalazar Slytherin\tConfundo\t52\nScabbers\tRevelio\t49\nScabbers\tSectumsempra\t49\nScabior\tWingardium Leviosa\t56\nScabior\tExpelliarmus\t56\nSeamus Finnigan\tStupefy\t52\nSeamus Finnigan\tAlohomora\t53\nSeptima Vector\tObliviate\t52\nSeptima Vector\tExpelliarmus\t51\nSeverus Snape\tLumos\t59\nSeverus Snape\tRevelio\t59\nSir Cadogan\tExpecto Patronum\t56\nSir Cadogan\tSectumsempra\t52\nSirius Black\tLumos\t49\nSirius Black\tWingardium Leviosa\t66\nStan Shunpike\tRevelio\t52\nStan Shunpike\tReparo\t57\nSturgis Podmore\tObliviate\t53\nSturgis Podmore\tConfundo\t53\nSusan Bones\tExpecto Patronum\t53\nSusan Bones\tStupefy\t58\nSybill Trelawney\tAccio\t54\nSybill Trelawney\tWingardium Leviosa\t59\nTed Tonks\tAvada Kedavra\t51\nTed Tonks\tAccio\t53\nTerry Boot\tObliviate\t57\nTerry Boot\tCrucio\t51\nThe Bloody Baron\tConfundo\t52\nThe Bloody Baron\tWingardium Leviosa\t53\nThe Fat Friar\tStupefy\t52\nThe Fat Friar\tCrucio\t55\nThe Fat Lady\tSectumsempra\t52\nThe Fat Lady\tRiddikulus\t51\nTheodore Nott\tAccio\t55\nTheodore Nott\tLumos\t50\nTom Marvolo Riddle\tConfundo\t53\nTom Marvolo Riddle\tAvada Kedavra\t53\nTravers\tExpelliarmus\t52\nTravers\tExpecto Patronum\t60\nTrevor\tCrucio\t57\nTrevor\tReparo\t56\nVernon Dursley\tRevelio\t54\nVernon Dursley\tObliviate\t51\nViktor Krum\tStupefy\t53\nViktor Krum\tSectumsempra\t51\nVincent Crabbe\tExpelliarmus\t50\nVincent Crabbe\tRevelio\t54\nVincent Crabbe, Sr.\tSectumsempra\t57\nVincent Crabbe, Sr.\tConfundo\t57\nWalden Macnair\tStupefy\t50\nWalden Macnair\tRevelio\t50\nWilhelmina Grubbly-Plank\tRiddikulus\t55\nWilhelmina Grubbly-Plank\tExpelliarmus\t57\nWilky Twycross\tReparo\t54\nWilky Twycross\tConfundo\t52\nWinky\tAccio\t54\nWinky\tReparo\t51\nXenophilius Lovegood\tWingardium Leviosa\t51\nXenophilius Lovegood\tExpelliarmus\t50\nYaxley\tCrucio\t58\nYaxley\tAlohomora\t50\nZacharias Smith\tWingardium Leviosa\t49\nZacharias Smith\tCrucio\t49\n"
          },
          {
            "type": "TEXT",
            "data": "Fail to run sql command: SELECT wizard, spell, times_cast\nFROM (\n    SELECT *,\n    ROW_NUMBER() OVER (PARTITION BY wizard ORDER BY times_cast DESC) AS row_num\n    FROM (SELECT wizard, spell, COUNT(*) AS times_cast FROM spells_cast GROUP BY wizard, spell)\n)\nWHERE row_num \u003c\u003d 2\njava.io.IOException: Fail to run stream sql job\n\tat org.apache.zeppelin.flink.sql.AbstractStreamSqlJob.run(AbstractStreamSqlJob.java:177)\n\tat org.apache.zeppelin.flink.sql.AbstractStreamSqlJob.run(AbstractStreamSqlJob.java:109)\n\tat org.apache.zeppelin.flink.FlinkStreamSqlInterpreter.callInnerSelect(FlinkStreamSqlInterpreter.java:86)\n\tat org.apache.zeppelin.flink.FlinkSqlInterpreter.callSelect(FlinkSqlInterpreter.java:494)\n\tat org.apache.zeppelin.flink.FlinkSqlInterpreter.callCommand(FlinkSqlInterpreter.java:257)\n\tat org.apache.zeppelin.flink.FlinkSqlInterpreter.runSqlList(FlinkSqlInterpreter.java:151)\n\tat org.apache.zeppelin.flink.FlinkSqlInterpreter.internalInterpret(FlinkSqlInterpreter.java:109)\n\tat org.apache.zeppelin.interpreter.AbstractInterpreter.interpret(AbstractInterpreter.java:55)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:110)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:849)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:741)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:172)\n\tat org.apache.zeppelin.scheduler.AbstractScheduler.runJob(AbstractScheduler.java:132)\n\tat org.apache.zeppelin.scheduler.ParallelScheduler.lambda$runJobInScheduler$0(ParallelScheduler.java:46)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.flink.client.deployment.application.UnsuccessfulExecutionException: Application Status: CANCELED\n\tat org.apache.flink.client.deployment.application.UnsuccessfulExecutionException.fromJobResult(UnsuccessfulExecutionException.java:71)\n\tat org.apache.flink.client.deployment.application.EmbeddedJobClient.lambda$getJobExecutionResult$2(EmbeddedJobClient.java:136)\n\tat java.util.concurrent.CompletableFuture.uniApply(CompletableFuture.java:616)\n\tat java.util.concurrent.CompletableFuture$UniApply.tryFire(CompletableFuture.java:591)\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n\tat org.apache.flink.client.deployment.application.JobStatusPollingUtils.lambda$null$2(JobStatusPollingUtils.java:101)\n\tat java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n\tat java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n\tat org.apache.flink.runtime.rpc.akka.AkkaInvocationHandler.lambda$invokeRpc$0(AkkaInvocationHandler.java:250)\n\tat java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n\tat java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n\tat org.apache.flink.util.concurrent.FutureUtils.doForward(FutureUtils.java:1389)\n\tat org.apache.flink.runtime.concurrent.akka.ClassLoadingUtils.lambda$null$1(ClassLoadingUtils.java:93)\n\tat org.apache.flink.runtime.concurrent.akka.ClassLoadingUtils.runWithContextClassLoader(ClassLoadingUtils.java:68)\n\tat org.apache.flink.runtime.concurrent.akka.ClassLoadingUtils.lambda$guardCompletionWithContextClassLoader$2(ClassLoadingUtils.java:92)\n\tat java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n\tat java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1975)\n\tat org.apache.flink.runtime.concurrent.akka.AkkaFutureUtils$1.onComplete(AkkaFutureUtils.java:47)\n\tat akka.dispatch.OnComplete.internal(Future.scala:300)\n\tat akka.dispatch.OnComplete.internal(Future.scala:297)\n\tat akka.dispatch.japi$CallbackBridge.apply(Future.scala:224)\n\tat akka.dispatch.japi$CallbackBridge.apply(Future.scala:221)\n\tat scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)\n\tat org.apache.flink.runtime.concurrent.akka.AkkaFutureUtils$DirectExecutionContext.execute(AkkaFutureUtils.java:65)\n\tat scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:68)\n\tat scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:284)\n\tat scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:284)\n\tat scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:284)\n\tat akka.pattern.PromiseActorRef.$bang(AskSupport.scala:621)\n\tat akka.pattern.PipeToSupport$PipeableFuture$$anonfun$pipeTo$1.applyOrElse(PipeToSupport.scala:24)\n\tat akka.pattern.PipeToSupport$PipeableFuture$$anonfun$pipeTo$1.applyOrElse(PipeToSupport.scala:23)\n\tat scala.concurrent.Future.$anonfun$andThen$1(Future.scala:532)\n\tat scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:29)\n\tat scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:29)\n\tat scala.concurrent.impl.CallbackRunnable.run(Promise.scala:60)\n\tat akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:63)\n\tat akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:100)\n\tat scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)\n\tat scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:81)\n\tat akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:100)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:49)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:48)\n\tat java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\n\tat java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\n\tat java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\n\tat java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\nCaused by: org.apache.flink.runtime.client.JobCancellationException: Job was cancelled.\n\tat org.apache.flink.runtime.jobmaster.JobResult.toJobExecutionResult(JobResult.java:146)\n\tat org.apache.flink.client.deployment.application.UnsuccessfulExecutionException.fromJobResult(UnsuccessfulExecutionException.java:60)\n\t... 52 more\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614304192735_2082887976",
      "id": "paragraph_1614304192735_2082887976",
      "dateCreated": "2021-02-26 09:49:52.735",
      "dateStarted": "2021-10-08 16:26:21.734",
      "dateFinished": "2021-10-08 16:26:40.682",
      "status": "ABORT"
    },
    {
      "text": "%flink.ssql\n",
      "user": "anonymous",
      "dateUpdated": "2021-02-26 09:50:12.151",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1614304212151_1443623833",
      "id": "paragraph_1614304212151_1443623833",
      "dateCreated": "2021-02-26 09:50:12.151",
      "status": "READY"
    }
  ],
  "name": "05 Continuous Top-N",
  "id": "2FYDMAK2S",
  "defaultInterpreterGroup": "flink",
  "version": "0.10.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}